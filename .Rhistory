model2_Rm <- neuralnet(Rm ~.,
data=train, hidden=c(9,5,3), linear.output=T)
pr.nn <- neuralnet::compute(model2_Rm,  test[,-13])
pr.nn <- pr.nn$net.result*(max(dane_Rm_$Rm)-min(dane_Rm_$Rm))+min(dane_Rm_$Rm)
test.r <- (test$Rm)*(max(dane_Rm_$Rm)-min(dane_Rm_$Rm))+min(dane_Rm_$Rm)
pr.nn <- pr.nn$net.result*(max(dane_Rm_$Rm)-min(dane_Rm_$Rm))+min(dane_Rm_$Rm)
pr.nn <- neuralnet::compute(model2_Rm,  test[,-13])
pr.nn <- pr.nn$net.result*(max(dane_Rm_$Rm)-min(dane_Rm_$Rm))+min(dane_Rm_$Rm)
test.r <- (test$Rm)*(max(dane_Rm_$Rm)-min(dane_Rm_$Rm))+min(dane_Rm_$Rm)
## wykres real vs predicted NN
plot(test.r,pr.nn,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
abline(0,1, col="black")
MSE(test.r,pr.nn)
dane1 <- read.csv("C:/Users/Ja/Desktop/Studia/Metale/nasze/DANE_UZUP_TWARD.csv")
dane2 <- read.csv("C:/Users/Ja/Desktop/Studia/Metale/nasze/dane_uzupelnione_wartosci_modelu.csv")
dane1<-dane1[c(colnames(dane2),"Rm","Udarnosc.Charpy")]
dane1$Rm.as.cast<-dane2$Rm.as.cast
dane1$A5.as.cast<-dane2$A5.as.cast
dane<-dane1
##RM
dane_Rm_ = dane[which(!is.na(dane$Rm)),]
dane_Rm_<-dane_Rm_[,-14]
colnames(dane_Rm_)
model1_Rm <-  randomForest(Rm ~ .,
data = dane_Rm_)
plot(dane_Rm_$Rm, predict(model1_Rm, dane_Rm_))
abline(0, 1, col = "red")
MSE<-function(y, y_pred){
sum((y-y_pred)^2)/length(y)
}
MSE(dane_Rm_$Rm, predict(model1_Rm, dane_Rm_))
model2_Rm <- neuralnet(Rm ~.,
data=train, hidden=c(7,3,2), linear.output=T)
pr.nn <- neuralnet::compute(model2_Rm,  test[,-13])
pr.nn <- pr.nn$net.result*(max(dane_Rm_$Rm)-min(dane_Rm_$Rm))+min(dane_Rm_$Rm)
test.r <- (test$Rm)*(max(dane_Rm_$Rm)-min(dane_Rm_$Rm))+min(dane_Rm_$Rm)
## wykres real vs predicted NN
plot(test.r,pr.nn,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
abline(0,1, col="black")
MSE(test.r, pr.nn)
MSE(test.r, pr.nn)
# NN
maxs <- apply(dane_Rm_, 2, max)
mins <- apply(dane_Rm_, 2, min)
scaled <- as.data.frame(scale(dane_Rm_, center = mins, scale = maxs - mins))
train <- scaled
test <- scaled
model2_Rm <- neuralnet(Rm ~.,
data=train, hidden=c(7,3,2), linear.output=T)
pr.nn <- neuralnet::compute(model2_Rm,  test[,-13])
pr.nn <- pr.nn$net.result*(max(dane_Rm_$Rm)-min(dane_Rm_$Rm))+min(dane_Rm_$Rm)
test.r <- (test$Rm)*(max(dane_Rm_$Rm)-min(dane_Rm_$Rm))+min(dane_Rm_$Rm)
## wykres real vs predicted NN
plot(test.r,pr.nn,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
abline(0,1, col="black")
MSE(test.r, pr.nn)
##Udarnosc
dane_U_ = dane[which(!is.na(dane$Udarnosc.Charpy)),]
dane_U_<-dane_U_[,-13]
colnames(dane_U_)
model1_U <-  randomForest(Udarnosc.Charpy ~ .,
data = dane_U_)
plot(dane_U_$Udarnosc.Charpy, predict(model1_U, dane_U_))
abline(0, 1, col = "red")
#0.9355264
MSE(dane_U_$Udarnosc.Charpy, predict(model1_U, dane_U_))
# NN
maxs <- apply(dane_U_, 2, max)
mins <- apply(dane_U_, 2, min)
scaled <- as.data.frame(scale(dane_U_, center = mins, scale = maxs - mins))
train <- scaled
test <- scaled
model2_U <- neuralnet(Udarnosc.Charpy ~.,
data=train, hidden=c(4,9,4), linear.output=T)
pr.nn <- neuralnet::compute(model2_U,  test[,-13])
pr.nn <- neuralnet::compute(model2_U,  test[,-13])
pr.nn <- pr.nn$net.result*(max(dane_U_$Udarnosc.Charpy)-min(dane_U_$Udarnosc.Charpy))+min(dane_U_$Udarnosc.Charpy)
test.r <- (test$Udarnosc.Charpy)*(max(dane_U_$Udarnosc.Charpy)-min(dane_U_$Udarnosc.Charpy))+min(dane_U_$Udarnosc.Charpy)
## wykres real vs predicted NN
plot(test.r,pr.nn,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
abline(0,1, col="black")
MSE(test.r, pr.nn)
pr.nn <- pr.nn$net.result*(max(dane_U_$Udarnosc.Charpy)-min(dane_U_$Udarnosc.Charpy))+min(dane_U_$Udarnosc.Charpy)
model2_U <- neuralnet(Udarnosc.Charpy ~.,
data=train, hidden=c(4,9,4), linear.output=T)
pr.nn <- neuralnet::compute(model2_U,  test[,-13])
pr.nn <- pr.nn$net.result*(max(dane_U_$Udarnosc.Charpy)-min(dane_U_$Udarnosc.Charpy))+min(dane_U_$Udarnosc.Charpy)
test.r <- (test$Udarnosc.Charpy)*(max(dane_U_$Udarnosc.Charpy)-min(dane_U_$Udarnosc.Charpy))+min(dane_U_$Udarnosc.Charpy)
## wykres real vs predicted NN
plot(test.r,pr.nn,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
abline(0,1, col="black")
MSE(test.r, pr.nn)
colnames(dane_Rm_)
dane1 <- read.csv("C:/Users/Ja/Desktop/Studia/Metale/nasze/DANE_UZUP_TWARD.csv")
dane2 <- read.csv("C:/Users/Ja/Desktop/Studia/Metale/nasze/dane_uzupelnione_wartosci_modelu.csv")
dane1<-dane1[c(colnames(dane2),"Rm","Udarnosc.Charpy")]
dane1$Rm.as.cast<-dane2$Rm.as.cast
dane1$A5.as.cast<-dane2$A5.as.cast
dane<-dane1
##RM
dane_Rm_ = dane[which(!is.na(dane$Rm)),]
dane_Rm_<-dane_Rm_[,-14]
colnames(dane_Rm_)
model1_Rm <-  randomForest(Rm ~ ., data = dane_Rm_)
plot(dane_Rm_$Rm, predict(model1_Rm, dane_Rm_))
abline(0, 1, col = "red")
MSE<-function(y, y_pred){
sum((y-y_pred)^2)/length(y)
}
R_kwadrat <- function(y, y_pred){
y_sr <- mean(y)
sum((y_pred-y_sr)^2) / sum((y-y_sr)^2)
}
##rf dla Rm
R_kwadrat(dane_Rm_$Rm, predict(model1_Rm, dane_Rm_))
#wyliczenie r^2
a1 <- sum((dane_Rm_$Rm-predict(model1_Rm, dane_Rm_))^2)
a2 <- sum((dane_Rm_$Rm-mean(dane_Rm_$Rm))^2)
r2 <- 1 - a1/a2
r2
MSE(dane_Rm_$Rm, predict(model1_Rm, dane_Rm_))
# NN
maxs <- apply(dane_Rm_, 2, max)
mins <- apply(dane_Rm_, 2, min)
scaled <- as.data.frame(scale(dane_Rm_, center = mins, scale = maxs - mins))
train <- scaled
test <- scaled
library(neuralnet)
model2_Rm <- neuralnet(Rm ~.,data=train, hidden=c(7,3,2), linear.output=T)
pr.nn <- neuralnet::compute(model2_Rm,  test[,-13])
pr.nn <- pr.nn$net.result*(max(dane_Rm_$Rm)-min(dane_Rm_$Rm))+min(dane_Rm_$Rm)
test.r <- (test$Rm)*(max(dane_Rm_$Rm)-min(dane_Rm_$Rm))+min(dane_Rm_$Rm)
## wykres real vs predicted NN
plot(test.r,pr.nn,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
abline(0,1, col="black")
legend('bottomright',legend='NN',pch=18,col='red', bty='n')
MSE(test.r, pr.nn)
#wyliczenie r^2
a1 <- sum((test.r-pr.nn)^2)
a2 <- sum((test.r-mean(test.r))^2)
r2 <- 1 - a1/a2
r2
dane1$Rm.as.cast<-dane2$Rm.as.cast
dane1$A5.as.cast<-dane2$A5.as.cast
dane<-dane1
##Udarnosc
dane_U_ = dane[which(!is.na(dane$Udarnosc.Charpy)),]
dane_U_<-dane_U_[,-13]
colnames(dane_U_)
model1_U <-  randomForest(Udarnosc.Charpy ~ .,
data = dane_U_)
plot(dane_U_$Udarnosc.Charpy, predict(model1_U, dane_U_))
abline(0, 1, col = "red")
R_kwadrat <- function(y, y_pred){
y_sr <- mean(y)
sum((y_pred-y_sr)^2) / sum((y-y_sr)^2)
}
##rf dla Rm
R_kwadrat(dane_U_$Udarnosc.Charpy, predict(model1_U, dane_U_))
#wyliczenie r^2
a1 <- sum((dane_U_$Udarnosc.Charpy-predict(model1_U, dane_U_))^2)
a2 <- sum((dane_U_$Udarnosc.Charpy-mean(dane_U_$Udarnosc.Charpy))^2)
r2 <- 1 - a1/a2
r2
#0.9355264
MSE(dane_U_$Udarnosc.Charpy, predict(model1_U, dane_U_))
# NN
maxs <- apply(dane_U_, 2, max)
mins <- apply(dane_U_, 2, min)
scaled <- as.data.frame(scale(dane_U_, center = mins, scale = maxs - mins))
train <- scaled
test <- scaled
library(neuralnet)
model2_U <- neuralnet(Udarnosc.Charpy ~.,data=train, hidden=c(4,9,4), linear.output=T)
pr.nn <- neuralnet::compute(model2_U,  test[,-13])
pr.nn <- pr.nn$net.result*(max(dane_U_$Udarnosc.Charpy)-min(dane_U_$Udarnosc.Charpy))+min(dane_U_$Udarnosc.Charpy)
test.r <- (test$Udarnosc.Charpy)*(max(dane_U_$Udarnosc.Charpy)-min(dane_U_$Udarnosc.Charpy))+min(dane_U_$Udarnosc.Charpy)
## wykres real vs predicted NN
plot(test.r,pr.nn,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
abline(0,1, col="black")
legend('bottomright',legend='NN',pch=18,col='red', bty='n')
MSE(test.r, pr.nn)
df <- read.csv("C:/Users/Ja/Desktop/nasze/testsmad.csv")
df <- read.csv("C:/Users/Ja/Desktop/nasze/testsmad.csv", header=T)
df <- read.csv("C:/Users/Ja/Desktop/nasze/testsmad.csv", header=T, sep=",")
df <- read.csv("C:/Users/Ja/Desktop/nasze/testsmad.csv", header=T, sep=",")
df <- read.csv("C:/Users/Ja/Desktop/nasze/testsmad.csv")
df <- read.csv("C:/Users/Ja/Desktop/nasze/testsmad.csv")
df <- read.csv2("C:/Users/Ja/Desktop/nasze/testsmad.csv")
df
## Czyszczenie danych
head(df)
dim(df) #1508   42
colnames(df)
df<-df[,c(2:15, 22,23,28,31,32)]
colnames(df)
colnames(df)<-("C","Si"                 ,"S",
"P" ,                 "Mg"  ,               "Mn",
"Ni",                 "Cu",                 "Mo",
"Cr",                 "Al",                 "Sn",
"B",                  "V",                  "Rm.as.cast",
"A5.as.cast"  , "Rm"  ,             "Twardosc","Udarnosc.Charpy")
colnames(df)<-c("C","Si" ,"S",
"P" ,                 "Mg"  ,               "Mn",
"Ni",                 "Cu",                 "Mo",
"Cr",                 "Al",                 "Sn",
"B",                  "V",                  "Rm.as.cast",
"A5.as.cast"  , "Rm"  ,             "Twardosc","Udarnosc.Charpy")
colnames(df)
## usuwamy wiersze, gdzie wszystkie obserwacje sa NA
nNA <- is.na(df)
na.wiersze<-numeric(nrow(nNA))
for(i in 1:nrow(nNA)){
na.wiersze[i]<-sum(nNA[i,])
}
summary(na.wiersze)
dim(df)
df <- df[which(na.wiersze<19), ]
dim(df)
# usuwamy kolumny, gdzie wszystkie obserwacji NA
na.kolumny <- logical()
for (i in 1:ncol(df)){
na.kolumny[i] <- sum(is.na(df[,i]))
}
summary(na.kolumny)
df <- df[, which(na.kolumny<1504)]
df <- df[, which(na.kolumny<19)]
dim(df)#1504   41
#wÄ™giel - srednia
df$C <- ifelse(is.na(df$C), mean(df$C[!is.na(df$C)]), df$C)
#krzem - srednia
df$Si <- ifelse(is.na(df$Si), mean(df$Si[!is.na(df$Si)]), df$Si)
#siarka - uzupeĹ‚niamy jako 0.01
df$S <- ifelse(is.na(df$S), 0.01, df$S)
#forsor - uzupeĹ‚niamy jako 0.02
df$P <- ifelse(is.na(df$P), 0.02, df$P)
#Mg - tutaj coĹ› jest nie tak, wartosci z przedzialu 0.15 - 0.35-40
#zamieniam wartoĹ›ci 0.75 na 0.075, 3 obs z 0.1 zostawiam
df$Mg <- ifelse(df$Mg > 0.07, 0.07, df$Mg)
df$Mg <- ifelse(df$Mg < 0.03, 0.03, df$Mg)
summary(df)
df$Mg
df <- read.csv2("C:/Users/Ja/Desktop/nasze/testsmad.csv")
df$Mg
df <- read.csv2("C:/Users/Ja/Desktop/nasze/testsmad.csv")
## Czyszczenie danych
head(df)
summary(df)
df<-df[,c(2:15, 22,23,28,31,32)]
colnames(df)<-c("C","Si" ,"S",
"P" ,                 "Mg"  ,               "Mn",
"Ni",                 "Cu",                 "Mo",
"Cr",                 "Al",                 "Sn",
"B",                  "V",                  "Rm.as.cast",
"A5.as.cast"  , "Rm"  ,             "Twardosc","Udarnosc.Charpy")
colnames(df)
summary(df)
## usuwamy wiersze, gdzie wszystkie obserwacje sa NA
nNA <- is.na(df)
na.wiersze<-numeric(nrow(nNA))
for(i in 1:nrow(nNA)){
na.wiersze[i]<-sum(nNA[i,])
}
dim(df)
summary(na.wiersze)
df <- df[which(na.wiersze<19), ]
# usuwamy kolumny, gdzie wszystkie obserwacji NA
na.kolumny <- logical()
for (i in 1:ncol(df)){
na.kolumny[i] <- sum(is.na(df[,i]))
}
summary(na.kolumny)
df <- df[, which(na.kolumny<19)]
dim(df)#1504   41
colnames(df)
df <- read.csv2("C:/Users/Ja/Desktop/nasze/testsmad.csv")
dim(df) #1508   42
df <- read.csv2("C:/Users/Ja/Desktop/nasze/testsmad.csv")
df<-df[,c(2:15, 22,23,28,31,32)]
colnames(df)
df<-df[,c(2:15, 22,23,28,31,32)]
df <- read.csv2("C:/Users/Ja/Desktop/nasze/testsmad.csv")
df<-df[,c(2:15, 22,23,28,31,32)]
colnames(df)<-c("C","Si" ,"S",
"P" ,                 "Mg"  ,               "Mn",
"Ni",                 "Cu",                 "Mo",
"Cr",                 "Al",                 "Sn",
"B",                  "V",                  "Rm.as.cast",
"A5.as.cast"  , "Rm"  ,             "Twardosc","Udarnosc.Charpy")
colnames(df)
#wÄ™giel - srednia
df$C <- ifelse(is.na(df$C), mean(df$C[!is.na(df$C)]), df$C)
#krzem - srednia
df$Si <- ifelse(is.na(df$Si), mean(df$Si[!is.na(df$Si)]), df$Si)
#siarka - uzupeĹ‚niamy jako 0.01
df$S <- ifelse(is.na(df$S), 0.01, df$S)
#forsor - uzupeĹ‚niamy jako 0.02
df$P <- ifelse(is.na(df$P), 0.02, df$P)
#Mg - tutaj coĹ› jest nie tak, wartosci z przedzialu 0.15 - 0.35-40
#zamieniam wartoĹ›ci 0.75 na 0.075, 3 obs z 0.1 zostawiam
df$Mg <- ifelse(df$Mg > 0.07, 0.07, df$Mg)
df$Mg <- ifelse(df$Mg < 0.03, 0.03, df$Mg)
df$Mg <- ifelse(is.na(df$Mg), mean(df$Mg[-which(is.na(df$Mg))]), df$Mg) #Mg na NA wartoĹ›Ä‡ minimalna
#Mn - dodaje wartosc minimalna
df$Mn <- ifelse(is.na(df$Mn), mean(na.omit(df$Mn)), df$Mn)
#Ni na NA wartosc 0.001
df$Ni <- ifelse(is.na(df$Ni), 0.001, df$Ni)
#Cu na Na wartosc 0.001
df$Cu <- ifelse(is.na(df$Cu), 0.001, df$Cu)
#Mo na Na wartosc 0.001
df$Mo <- ifelse(is.na(df$Mo), 0.001, df$Mo)
#Cr
df$Cr <- ifelse(is.na(df$Cr), 0.001, df$Cr)
#Al
df$Al <- ifelse(is.na(df$Al), 0.001, df$Al)
#Sn
df$Sn <- ifelse(is.na(df$Sn), 0.001, df$Sn)
#B
df$B <- ifelse(is.na(df$B), 0.001, df$B)
#V
df$V <- ifelse(is.na(df$V), 0.001, df$V)
summary(df)
View(model2)
### dane, gdzie nie ma wartosci Rm.as.cast
index_na_rm<-which(is.na(df$Rm.as.cast))
dane_b1 <- df[which(is.na(df$Rm.as.cast)),]
dane_b1 <- dane_b1[,-which(names(dane_b1)=="Rm.as.cast")]
dane_b1 <- dane_b1[,-which(names(dane_b1)=="A5.as.cast")]
dane_b1$Rm.as.cast_1 <- predict(model2, dane_b1)
df[index_na_rm,"Rm.as.cast"]<-predict(model2, dane_b1)
### dane, gdzie nie ma wartoĹ›ci A5.as.cast
index_na_a5<-which(is.na(df$A5.as.cast))
dane_b2 <- df[which(is.na(df_temp1$A5.as.cast)),]
dane_b2 <- dane_b2[,-which(names(dane_b2)=="A5.as.cast")]
dane_b2 <- dane_b2[,-which(names(dane_b2)=="Rm.as.cast")]
dane_b2 <- df[which(is.na(df$A5.as.cast)),]
dane_b2 <- dane_b2[,-which(names(dane_b2)=="A5.as.cast")]
dane_b2 <- dane_b2[,-which(names(dane_b2)=="Rm.as.cast")]
dane_b2$A5.as.cast_1 <- predict(model4, dane_b2)
df[index_na_a5,"A5.as.cast"]<-predict(model4, dane_b2)
View(df)
### dane, gdzie nie ma wartosci Rm.as.cast
index_na_rm<-which(is.na(df$Rm.as.cast))
index_na_rm
dane_b1 <- df[which(is.na(df$Rm.as.cast)),]
dane_b1 <- dane_b1[,-which(names(dane_b1)=="Rm.as.cast")]
dane_b1 <- dane_b1[,-which(names(dane_b1)=="A5.as.cast")]
dane_b1$Rm.as.cast_1 <- predict(model2, dane_b1)
dane_b1$Rm.as.cast_1
colnames(df)
df<-df[,-c(11:14)]
colnames(df)
df<-df[,-9]
colnames(df)
df<-df[,-c(14,12)]
### dane, gdzie nie ma wartosci Rm.as.cast
index_na_rm<-which(is.na(df$Rm.as.cast))
dane_b1 <- df[which(is.na(df$Rm.as.cast)),]
dane_b1 <- dane_b1[,-which(names(dane_b1)=="Rm.as.cast")]
dane_b1 <- dane_b1[,-which(names(dane_b1)=="A5.as.cast")]
dane_b1$Rm.as.cast_1 <- predict(model2, dane_b1)
df[index_na_rm,"Rm.as.cast"]<-predict(model2, dane_b1)
View(df)
View(df)
dane <- read.csv("polaczone_dane_do_modelowania.csv")
dane1 <- dane[,-which(names(dane) == "A5.as.cast")]
model2 <-  randomForest(Rm.as.cast ~ ., data = dane1)
dane3 <- dane[,-which(names(dane) == "Rm.as.cast")]
model4 <-  randomForest(A5.as.cast ~ ., data = dane3)
### dane, gdzie nie ma wartosci Rm.as.cast
index_na_rm<-which(is.na(df$Rm.as.cast))
dane_b1 <- df[which(is.na(df$Rm.as.cast)),]
dane_b1 <- dane_b1[,-which(names(dane_b1)=="Rm.as.cast")]
dane_b1 <- dane_b1[,-which(names(dane_b1)=="A5.as.cast")]
dane_b1$Rm.as.cast_1 <- predict(model2, dane_b1)
df[index_na_rm,"Rm.as.cast"]<-predict(model2, dane_b1)
View(df)
index_na_a5
dane_b2 <- df[which(is.na(df$A5.as.cast)),]
View(dane_b2)
dane_b2 <- dane_b2[,-which(names(dane_b2)=="A5.as.cast")]
dane_b2 <- dane_b2[,-which(names(dane_b2)=="Rm.as.cast")]
predict(model4, dane_b2)
View(dane_b2)
View(dane_b1)
mean(df$Twardosc)
summary(df$Twardosc)
df$Twardosc<-ifelse(is.na(df$Twardosc), mean(df$Twardosc[-which(is.na(df$Twardosc))]), df$Twardosc)
### dane, gdzie nie ma wartosci Rm.as.cast
index_na_rm<-which(is.na(df$Rm.as.cast))
dane_b1 <- df[which(is.na(df$Rm.as.cast)),]
dane_b1 <- dane_b1[,-which(names(dane_b1)=="Rm.as.cast")]
dane_b1 <- dane_b1[,-which(names(dane_b1)=="A5.as.cast")]
dane_b1$Rm.as.cast_1 <- predict(model2, dane_b1)
df[index_na_rm,"Rm.as.cast"]<-predict(model2, dane_b1)
View(df)
### dane, gdzie nie ma wartoĹ›ci A5.as.cast
index_na_a5<-which(is.na(df$A5.as.cast))
dane_b2 <- df[which(is.na(df$A5.as.cast)),]
dane_b2 <- dane_b2[,-which(names(dane_b2)=="A5.as.cast")]
dane_b2 <- dane_b2[,-which(names(dane_b2)=="Rm.as.cast")]
dane_b2$A5.as.cast_1 <- predict(model4, dane_b2)
df[index_na_a5,"A5.as.cast"]<-predict(model4, dane_b2)
View(df)
#### df_temp - dolaczenie danych z modelu dla Rm.as.cast oraz A5.as.cast
summary(df)
colnames(df)
df$Rm_pred<-predict(model1_Rm, df)
df$Rm_pred
View(df)
df$Rm_pred_rf<-predict(model1_Rm, df)
df$Rm_pred_nn<-predict(model2_Rm, df)
df$U_pred_rf<-predict(model1_U, df)
df$U_pred_nn<-predict(model2_U, df)
df2 <- read.csv2("C:/Users/Ja/Desktop/nasze/testsmad.csv")
df.copy<-df
df <- read.csv2("C:/Users/Ja/Desktop/nasze/testsmad.csv")
df2<-df2[,c(2:15, 22,23,28,31,32)]
colnames(df)<-c("C","Si" ,"S",
"P" ,                 "Mg"  ,               "Mn",
"Ni",                 "Cu",                 "Mo",
"Cr",                 "Al",                 "Sn",
"B",                  "V",                  "Rm.as.cast",
"A5.as.cast"  , "Rm"  ,             "Twardosc","Udarnosc.Charpy")
## usuwamy wiersze, gdzie wszystkie obserwacje sa NA
nNA <- is.na(df)
na.wiersze<-numeric(nrow(nNA))
for(i in 1:nrow(nNA)){
na.wiersze[i]<-sum(nNA[i,])
}
df <- df[which(na.wiersze<19), ]
# usuwamy kolumny, gdzie wszystkie obserwacji NA
na.kolumny <- logical()
for (i in 1:ncol(df)){
na.kolumny[i] <- sum(is.na(df[,i]))
}
df <- df[, which(na.kolumny<19)]
dim(df)#1504   41
colnames(df)
df2 <- read.csv2("C:/Users/Ja/Desktop/nasze/testsmad.csv")
colnames(df)
## uzgodnione typy, uzgodnione wartoĹ›ci dla wielkoĹ›ci sferoidĂłw
test<-read.csv("dane-zeliwo-v1.csv")
df2 <- read.csv2("C:/Users/Ja/Desktop/nasze/testsmad.csv")
colnames(df)
df <- read.csv2("C:/Users/Ja/Desktop/nasze/testsmad.csv")
colnames(df)
df2<-df2[,c(2:15, 22,23,28,31,32)]
colnames(df)<-c("C","Si" ,"S",
"P" ,                 "Mg"  ,               "Mn",
"Ni",                 "Cu",                 "Mo",
"Cr",                 "Al",                 "Sn",
"B",                  "V",                  "Rm.as.cast",
"A5.as.cast"  , "Rm"  ,             "Twardosc","Udarnosc.Charpy")
colnames(df)
df2 <- read.csv2("C:/Users/Ja/Desktop/nasze/testsmad.csv")
colnames(df)
df.copy$U<-df2$Udarność.Charpy..J.
df.copy$Rm<-df2$Rm..MPa.
View(df.copy)
View(df.copy)
# NN
maxs <- apply(dane_U_, 2, max)
mins <- apply(dane_U_, 2, min)
colnames(df)
colnames(df.copy)
dane_U_<-df.copy[,1:12]
scaled <- as.data.frame(scale(dane_U_, center = mins, scale = maxs - mins))
# NN
maxs <- apply(dane_U_, 2, max)
mins <- apply(dane_U_, 2, min)
scaled <- as.data.frame(scale(dane_U_, center = mins, scale = maxs - mins))
predict(model2_U, dane_U_)
df.copy$U_pred_nn<-predict(model2_U, dane_U_)
View(df.copy)
View(df.copy)
id<-!is.na(df.copy$Rm)
colnames(df.copy)
sum(df.copy[id,20]-df.copy[id,14])^2/length(id)
df.copy[id,20]
id
df.copy[,20]
colnames(df.copy)
sum(df.copy[id,19]-df.copy[id,14])^2/length(id)
plot(df.copy[id,19],df.copy[id,14])
abline(0,1)
abline(0,1,col="red")
id<-!is.na(df.copy$U)
colnames(df.copy)
sum(df.copy[id,18]-df.copy[id,16])^2/length(id)
plot(df.copy[id,18],df.copy[id,16])
abline(0,1,col="red")
colnames(df.copy)
r2
##rf dla Rm
R_kwadrat(dane_Rm_$Rm, predict(model1_Rm, dane_Rm_))
##rf dla Rm
R_kwadrat(dane_U_$Udarnosc.Charpy, predict(model1_U, dane_U_))
r2
#wyliczenie r^2
a1 <- sum((dane_U_$Udarnosc.Charpy-predict(model1_U, dane_U_))^2)
a2 <- sum((dane_U_$Udarnosc.Charpy-mean(dane_U_$Udarnosc.Charpy))^2)
r2 <- 1 - a1/a2
r2
colnames(dane_U_)
df
df.copy
a1 <- sum((df.copy$Udarnosc.Charpy-predict(model1_U, df.copy))^2)
a2 <- sum((df.copy$Udarnosc.Charpy-mean(df.copy$Udarnosc.Charpy))^2)
a1 <- sum((df.copy$Udarnosc.Charpy-predict(model1_U, df.copy))^2)
a1
df.copy
